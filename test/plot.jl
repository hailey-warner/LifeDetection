# Tikz Plots:
PLOT_CPDS     = true
PLOT_BN       = true
DECISION_TREE = true

# WANDB Plots:
ALPHA_VECTORS   = true
PARETO_FRONTIER = true

using Pkg
if PLOT_BN || PLOT_CPDS || DECISION_TREE
	Pkg.activate("LifeDetectionPkg")
	Pkg.instantiate()
end

include("../src/bayes_net.jl")
include("../src/common/plotting_tiks.jl")
include("../src/common/plotting_wandb.jl")

if PLOT_BN == true
	plot = BayesNets.plot(bn)
	if !isdir("figures")
		mkpath("figures")
	end
	TikzPictures.save(SVG("figures/bayes_net_autogenerated.pdf"), plot)
end

if PLOT_CPDS == true
	p = @pgf GroupPlot({
		group_style = {group_size = "6 by 4", horizontal_sep = "2.5cm", vertical_sep = "2.5cm"},
		width = "4cm",
		height = "3cm",
	})

	# 1: P(life) prior figure
	prior_plot = make_pgfplot(bn.cpds[bn.name_to_index[:C0]].distributions[1], raw"P($C_0$)")
	PGFPlotsX.pgfsave("figures/prior.png", prior_plot)

	# 2: CPD figure
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C1]].distributions[1], raw"P($C_1$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C1]].distributions[2], raw"P($C_1$ | $C_0$=true)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C2]].distributions[1], raw"P($C_2$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C2]].distributions[2], raw"P($C_2$ | $C_0$=true)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C3]].distributions[1], raw"P($C_3$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C3]].distributions[2], raw"P($C_3$ | $C_0$=true)"))

	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C4]].distributions[1], raw"P($C_4$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C4]].distributions[2], raw"P($C_4$ | $C_0$=true)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C5]].distributions[1], raw"P($C_5$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C5]].distributions[2], raw"P($C_5$ | $C_0$=true)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C6]].distributions[1], raw"P($C_6$ | $C_0$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C6]].distributions[2], raw"P($C_6$ | $C_0$=true)"))

	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C7]].distributions[1], raw"P($C_7$ | $C_2$=false)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C7]].distributions[2], raw"P($C_7$ | $C_2$=true)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C8]].distributions[1], raw"P($C_8$ | $C_4$=false, $C_5$=0)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C8]].distributions[23], raw"P($C_8$ | $C_4$=false, $C_5$=22)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C8]].distributions[24], raw"P($C_8$ | $C_4$=true, $C_5$=0)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C8]].distributions[46], raw"P($C_8$ | $C_4$=true, $C_5$=22)"))

	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C9]].distributions[1], raw"P($C_9$ | $C_1$=false, $C_5$=0)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C9]].distributions[23], raw"P($C_9$ | $C_1$=false, $C_5$=22)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C9]].distributions[24], raw"P($C_9$ | $C_1$=true, $C_5$=0)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C9]].distributions[46], raw"P($C_9$ | $C_1$=true, $C_5$=22)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C10]].distributions[1], raw"P($C_{10}$ | $C_5$=0)"))
	push!(p, make_pgfplot(bn.cpds[bn.name_to_index[:C10]].distributions[23], raw"P($C_{10}$ | $C_5$=22)"))

	PGFPlotsX.pgfsave("figures/cpds.png", p)
end

# if BAYES_NET == true
#     plot_bayes_net(bn)
# end

# if DECISION_TREE == true
#     tree_data = make_decision_tree(pomdp, policy)
#     plot_decision_tree(tree_data)
# end
# if ALPHA_VECTORS == true
#     plot_alpha_vectors(policy)
# end

# if PARETO_FRONTIER == true
#     end_λ = 20
#     reward_list = []
#     acc_list = []
#     for λ in range(1, end_λ)
#         pomdp = binaryLifeDetectionPOMDP(inst=NUM_INSTRUMENTS, bn=bn, λ=λ,  k=SENSOR_COST, discount=0.9)
#         solver = SARSOPSolver(verbose=true, timeout=100)
#         policy = solve(solver, pomdp)
#         rewards, accuracy = simulate_policy(pomdp, policy, "SARSOP", 200, verbose=false) # SARSOP or greedy
#         push!(reward_list, rewards)
#         push!(acc_list, accuracy)
#     end
#     x = range(1, end_λ)
#     p1 = scatter(x, reward_list, color=:blue, xlabel="λ", ylabel="Reward Value", title="Reward", label="rewards")
#     p2 = scatter(x, acc_list, color=:red, xlabel="λ", ylabel="Accuracy (0 to 1)", title="Accuracy", label="Accuracy")
#     p = Plots.plot(p1, p2, layout=(1, 2), size=(800, 400), title="Pareto Frontier")
#     savefig(p, "./figures/pareto_frontier.png")
# end

# # @show_requirements POMDPs.solve(solver, pomdp)
